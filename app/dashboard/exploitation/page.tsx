"use client"

import { useState, useEffect, useRef, Suspense } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Zap, Terminal, AlertTriangle, Info } from "lucide-react"
import { useMetasploitModules } from "@/hooks/useMetasploitModules";
import { Switch } from "@/components/ui/switch"

// Lazy load the heavy Metasploit modules hook
const LazyMetasploitModules = ({ children }: { children: any }) => {
  return children
}

export default function ExploitationPage() {
  const [selectedExploit, setSelectedExploit] = useState("")
  const [target, setTarget] = useState("")
  const [payload, setPayload] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const [allModules, setAllModules] = useState<string[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [port, setPort] = useState("80")
  const [useSsl, setUseSsl] = useState(false)
  const [lhost, setLhost] = useState("")
  const [lport, setLport] = useState("4444")
  const [urlPath, setUrlPath] = useState("/")
  const [consoleOutput, setConsoleOutput] = useState("")
  const [isLaunching, setIsLaunching] = useState(false)
  const [payloadsList, setPayloadsList] = useState<string[]>([])
  const [payloadsLoading, setPayloadsLoading] = useState(false)
  const [payloadsError, setPayloadsError] = useState<string | null>(null)
  // Advanced terminal state
  const [terminalLines, setTerminalLines] = useState<string[]>(["> "])
  const [inputValue, setInputValue] = useState("")
  const [caretPos, setCaretPos] = useState(0)
  const [showCursor, setShowCursor] = useState(true)
  const [history, setHistory] = useState<string[]>([])
  const [historyIndex, setHistoryIndex] = useState<number | null>(null)
  const terminalRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const interval = setInterval(() => setShowCursor((c) => !c), 500)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    // Always scroll to bottom on new line
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight
    }
  }, [terminalLines])

  useEffect(() => {
    const updateCursor = () => {
      if (terminalRef.current) {
        const input = terminalRef.current
        const value = input.textContent || ""
        const selectionStart = caretPos
        // Create a dummy span to measure text width
        const dummy = document.createElement('span')
        dummy.style.visibility = 'hidden'
        dummy.style.position = 'absolute'
        dummy.style.whiteSpace = 'pre'
        dummy.style.font = window.getComputedStyle(input).font
        dummy.textContent = value.slice(0, selectionStart)
        document.body.appendChild(dummy)
        // setCursorLeft(dummy.offsetWidth) // This line is no longer needed
        document.body.removeChild(dummy)
      }
    }
    updateCursor()
    if (terminalRef.current) {
      // terminalDivRef.current.addEventListener('input', updateCursor) // This line is no longer needed
      // terminalDivRef.current.addEventListener('keyup', updateCursor) // This line is no longer needed
      // terminalDivRef.current.addEventListener('click', updateCursor) // This line is no longer needed
    }
    return () => {
      if (terminalRef.current) {
        // terminalDivRef.current.removeEventListener('input', updateCursor) // This line is no longer needed
        // terminalDivRef.current.removeEventListener('keyup', updateCursor) // This line is no longer needed
        // terminalDivRef.current.removeEventListener('click', updateCursor) // This line is no longer needed
      }
    }
  }, [inputValue, caretPos]) // Added caretPos to dependency array

  const { modules, total, totalPages, loading, error } = useMetasploitModules(currentPage, 100);

  useEffect(() => {
    if (modules.length > 0) {
      setAllModules(prev => [...new Set([...prev, ...modules])])
    }
  }, [modules])

  useEffect(() => {
    if (selectedExploit) {
      setPayloadsLoading(true)
      fetch(`http://localhost:8000/api/metasploit/payloads/?exploit_module=${encodeURIComponent(selectedExploit)}`)
        .then(res => res.json())
        .then(data => {
          console.log(`Payloads response for ${selectedExploit}:`, data)  // Debug log
          if (data.payloads) {
            setPayloadsList(data.payloads)
            if (data.payloads.length === 0) console.warn(`No payloads found for ${selectedExploit}`)
          } else {
            setPayloadsError(data.error || "Unknown error")
            console.error(`Payload error: ${data.error}`)  // Debug error
          }
          setPayloadsLoading(false)
        })
        .catch((err: any) => {
          setPayloadsError(err.message || 'Unknown error')
          console.error(`Fetch error: ${err.message}`)  // Debug fetch error
          setPayloadsLoading(false)
        })
    } else {
      setPayloadsList([])
    }
  }, [selectedExploit])

  const filteredModules = allModules.filter(mod => mod.toLowerCase().includes(searchTerm.toLowerCase()))

  const loadMore = () => {
    if (currentPage < totalPages) {
      setCurrentPage(prev => prev + 1)
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-600"
      case "high":
        return "bg-orange-600"
      case "medium":
        return "bg-yellow-600"
      case "low":
        return "bg-blue-600"
      default:
        return "bg-gray-600"
    }
  }

  const handleLaunch = async () => {
    setIsLaunching(true)
    setConsoleOutput("Launching exploit...")
    try {
      const response = await fetch("http://localhost:8000/api/metasploit/run_exploit/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          exploit_module: selectedExploit,
          target,
          port,
          use_ssl: useSsl,
          url_path: urlPath,
          lhost,
          lport,
          payload
        }),
      })
      const data = await response.json()
      if (data.status) {
        setConsoleOutput(data.output || "Exploit launched successfully")
      } else {
        setConsoleOutput(`Error: ${data.error}`)
      }
    } catch (err: any) {
      setConsoleOutput(`Error: ${err.message || 'Unknown error'}`)
    }
    setIsLaunching(false)
  }

  const handleTerminalKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      if (inputValue.trim() !== "") {
        // Add input to lines
        setTerminalLines((prev) => [...prev.slice(0, -1), "> " + inputValue])
        // Send to backend
        fetch("http://localhost:8000/api/metasploit/console/", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ command: inputValue }),
        })
          .then((res) => res.json())
          .then((data) => {
            setTerminalLines((prev) => [...prev, ...(data.output ? data.output.split("\n") : [data.error || "No output"]), "> "])
          })
        setHistory((prev) => [...prev, inputValue])
        setHistoryIndex(null)
        setInputValue("")
        setCaretPos(0)
      } else {
        setTerminalLines((prev) => [...prev, "> "])
        setInputValue("")
        setCaretPos(0)
      }
    } else if (e.key === "Enter" && e.shiftKey) {
      // Multi-line input
      setInputValue(inputValue.slice(0, caretPos) + "\n" + inputValue.slice(caretPos))
      setCaretPos(caretPos + 1)
      e.preventDefault()
    } else if (e.key.length === 1 && !e.ctrlKey && !e.metaKey && !e.altKey) {
      setInputValue(inputValue.slice(0, caretPos) + e.key + inputValue.slice(caretPos))
      setCaretPos(caretPos + 1)
      e.preventDefault()
    } else if (e.key === "Backspace") {
      if (caretPos > 0) {
        setInputValue(inputValue.slice(0, caretPos - 1) + inputValue.slice(caretPos))
        setCaretPos(caretPos - 1)
      }
      e.preventDefault()
    } else if (e.key === "Delete") {
      setInputValue(inputValue.slice(0, caretPos) + inputValue.slice(caretPos + 1))
      e.preventDefault()
    } else if (e.key === "ArrowLeft") {
      setCaretPos(Math.max(0, caretPos - 1))
      e.preventDefault()
    } else if (e.key === "ArrowRight") {
      setCaretPos(Math.min(inputValue.length, caretPos + 1))
      e.preventDefault()
    } else if (e.key === "Home") {
      setCaretPos(0)
      e.preventDefault()
    } else if (e.key === "End") {
      setCaretPos(inputValue.length)
      e.preventDefault()
    } else if (e.key === "ArrowUp") {
      if (history.length > 0) {
        const idx = historyIndex === null ? history.length - 1 : Math.max(0, historyIndex - 1)
        setInputValue(history[idx])
        setCaretPos(history[idx].length)
        setHistoryIndex(idx)
      }
      e.preventDefault()
    } else if (e.key === "ArrowDown") {
      if (history.length > 0 && historyIndex !== null) {
        const idx = historyIndex + 1
        if (idx < history.length) {
          setInputValue(history[idx])
          setCaretPos(history[idx].length)
          setHistoryIndex(idx)
        } else {
          setInputValue("")
          setCaretPos(0)
          setHistoryIndex(null)
        }
      }
      e.preventDefault()
    }
  }

  const renderTerminal = () => (
    <div
      ref={terminalRef}
      tabIndex={0}
      onKeyDown={handleTerminalKeyDown}
      className="w-full bg-background text-green-400 font-mono rounded px-2 py-1 border border-border outline-none min-h-[12rem] max-h-96 overflow-y-auto whitespace-pre-wrap"
      style={{ fontSize: "1rem" }}
      aria-label="Metasploit terminal"
    >
      {terminalLines.slice(0, -1).map((line, idx) => (
        <div key={idx}>{line}</div>
      ))}
      <div style={{ display: "inline" }}>
        {"> "}
        {inputValue.slice(0, caretPos)}
        <span
          className={`inline-block ${showCursor ? "opacity-100" : "opacity-0"}`}
          style={{ width: "1ch", background: "black", color: "green", fontWeight: "bold", fontFamily: "inherit" }}
        >
          _
        </span>
        {inputValue.slice(caretPos)}
      </div>
    </div>
  )

  return (
    <div className="space-y-4 sm:space-y-6">
      <div>
        <h1 className="text-2xl sm:text-3xl font-bold text-foreground mb-2">Exploitation</h1>
        <p className="text-muted-foreground text-sm sm:text-base">Advanced exploitation framework interface</p>
      </div>

      <Alert className="bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700">
        <AlertTriangle className="h-4 w-4 text-yellow-600 dark:text-yellow-200" />
        <AlertDescription className="text-yellow-700 dark:text-yellow-200 text-sm">
          <strong>Warning:</strong> This module is for authorized penetration testing only. Ensure you have proper
          authorization before using any exploitation techniques.
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
        <Card className="bg-card border-border">
          <CardHeader>
            <CardTitle className="text-foreground text-lg sm:text-xl">Exploit Configuration</CardTitle>
            <CardDescription className="text-muted-foreground text-sm">Configure exploitation parameters</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="target" className="text-foreground text-sm">
                Target
              </Label>
              <Input
                id="target"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="192.168.1.100 or http://example.com"
                className="bg-secondary border-border text-foreground text-sm sm:text-base"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="port" className="text-foreground text-sm">
                Port
              </Label>
              <Input
                id="port"
                value={port}
                onChange={(e) => setPort(e.target.value)}
                placeholder="80"
                className="bg-secondary border-border text-foreground text-sm sm:text-base"
              />
            </div>

            <div className="flex items-center space-x-2">
              <Label className="text-foreground text-sm">
                Use SSL
              </Label>
              <Switch checked={useSsl} onCheckedChange={setUseSsl} className="data-[state=checked]:bg-green-600 data-[state=unchecked]:bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="urlPath" className="text-foreground text-sm">
                URL Path
              </Label>
              <Input
                id="urlPath"
                value={urlPath}
                onChange={(e) => setUrlPath(e.target.value)}
                placeholder="/"
                className="bg-secondary border-border text-foreground text-sm sm:text-base"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="exploit" className="text-foreground text-sm">
                Exploit Module
              </Label>
              <Select value={selectedExploit} onValueChange={setSelectedExploit}>
                <SelectTrigger className="bg-secondary border-border text-foreground text-sm sm:text-base">
                  <SelectValue placeholder="Select exploit" />
                </SelectTrigger>
                <SelectContent className="bg-secondary border-border max-h-60 overflow-y-auto">
                  {loading && <SelectItem disabled value="loading">Loading exploits...</SelectItem>}
                  {error && <SelectItem disabled value="error">Error loading exploits</SelectItem>}
                  {allModules.map((mod) => (
                    <SelectItem key={mod} value={mod}>
                      {mod}
                    </SelectItem>
                  ))}
                  {!loading && currentPage < totalPages && (
                    <Button variant="ghost" onClick={loadMore} className="w-full text-center">
                      Load More
                    </Button>
                  )}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="payload" className="text-foreground text-sm">
                Payload
              </Label>
              <Select value={payload} onValueChange={setPayload}>
                <SelectTrigger className="bg-secondary border-border text-foreground text-sm sm:text-base">
                  <SelectValue placeholder="Select payload" />
                </SelectTrigger>
                <SelectContent className="bg-secondary border-border">
                  {payloadsLoading && <SelectItem disabled value="loading">Loading payloads...</SelectItem>}
                  {payloadsError && <SelectItem disabled value="error">Error: {payloadsError}</SelectItem>}
                  {!payloadsLoading && !payloadsError && payloadsList.map((p) => (
                    <SelectItem key={p} value={p}>
                      <span className="truncate">{p}</span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="lhost" className="text-foreground text-sm">
                Local Host (LHOST)
              </Label>
              <Input
                id="lhost"
                value={lhost}
                onChange={(e) => setLhost(e.target.value)}
                placeholder="Your IP address"
                className="bg-secondary border-border text-foreground text-sm sm:text-base"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="lport" className="text-foreground text-sm">
                Local Port (LPORT)
              </Label>
              <Input
                id="lport"
                value={lport}
                onChange={(e) => setLport(e.target.value)}
                placeholder="4444"
                className="bg-secondary border-border text-foreground text-sm sm:text-base"
              />
            </div>

            <Button
              disabled={!target || !selectedExploit || !lhost || isLaunching}
              onClick={handleLaunch}
              className="w-full bg-destructive hover:bg-destructive/80 text-sm sm:text-base"
            >
              <Zap className="h-4 w-4 mr-2" />
              {isLaunching ? "Launching..." : "Launch Exploit"}
            </Button>
          </CardContent>
        </Card>

        <Card className="bg-card border-border">
          <CardHeader>
            <CardTitle className="text-foreground text-lg sm:text-xl">Available Exploits</CardTitle>
            <CardDescription className="text-muted-foreground text-sm">Browse exploitation modules</CardDescription>
          </CardHeader>
          <CardContent>
            <Input
              placeholder="Search exploits..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="mb-4 bg-secondary border-border text-foreground text-sm sm:text-base"
            />
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {loading && <div className="text-muted-foreground">Loading modules...</div>}
              {error && <div className="text-destructive">Error: {error}</div>}
              {!loading && !error && filteredModules.length === 0 && (
                <div className="text-muted-foreground">No modules found.</div>
              )}
              {!loading && !error && filteredModules.map((mod) => (
                <div
                  key={mod}
                  className={`p-3 rounded-lg cursor-pointer transition-colors ${
                    selectedExploit === mod ? "bg-muted" : "bg-secondary hover:bg-muted"
                  }`}
                  onClick={() => setSelectedExploit(mod)}
                >
                  <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-2 space-y-2 sm:space-y-0">
                    <h3 className="text-foreground font-medium text-sm sm:text-base break-words">{mod}</h3>
                  </div>
                </div>
              ))}
              {!loading && currentPage < totalPages && (
                <Button variant="ghost" onClick={loadMore} className="w-full text-center">
                  Load More
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-lg sm:text-xl">
            <Terminal className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
            Exploitation Console
          </CardTitle>
          <CardDescription className="text-sm">Command output and session management</CardDescription>
        </CardHeader>
        <CardContent>
          <pre className="bg-background rounded-lg p-3 sm:p-4 font-mono text-xs sm:text-sm overflow-x-auto whitespace-pre-wrap text-muted-foreground">
            {consoleOutput || "Ready for exploitation..."}
          </pre>
        </CardContent>
      </Card>

      <Alert className="bg-blue-100 dark:bg-blue-900 border border-blue-300 dark:border-blue-700">
        <Info className="h-4 w-4 text-blue-600 dark:text-blue-200" />
        <AlertDescription className="text-blue-700 dark:text-blue-200 text-sm">
          <strong>Note:</strong> Please Ensure Stable Internet Connection
        </AlertDescription>
      </Alert>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-lg sm:text-xl">
            <Terminal className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
            Metasploit Terminal
          </CardTitle>
          <CardDescription className="text-sm">Run direct Metasploit CLI commands</CardDescription>
        </CardHeader>
        <CardContent>
          {renderTerminal()}
        </CardContent>
      </Card>
    </div>
  )
}
